#!/bin/sh
#
# This script runs when the platform setup the challenge.
#
# The platform determines if the script was successful using the exit code of this
# script. If the exit code is not 0, the script fails. 
#

echo "This is the setup script"

set -e
mkdir -p /root/apply-lb-configuration
cd /root/apply-lb-configuration

zone="europe-west1-b"

adc_instance_nsip=`gcloud compute instances describe --zone ${zone} adc-demo --format="value(networkInterfaces[0].accessConfigs[0].natIP)"`
adc_instance_vip=`gcloud compute instances describe --zone ${zone} adc-demo --format="value(networkInterfaces[1].networkIP)"`
adc_instance_snip=`gcloud compute instances describe --zone ${zone} adc-demo --format="value(networkInterfaces[2].networkIP)"`
backend_server1_ip=`gcloud compute instances describe --zone ${zone} backend-server-1 --format="value(networkInterfaces[0].networkIP)"`
backend_server2_ip=`gcloud compute instances describe --zone ${zone} backend-server-2 --format="value(networkInterfaces[0].networkIP)"`

# Create provider.tf
cat <<EOF >provider.tf

terraform {
  required_providers {
    citrixadc = {
      source = "citrix/citrixadc"
      version = "1.9.0"
    }
  }
}

provider "citrixadc" {
  endpoint = "https://${adc_instance_nsip}"
  insecure_skip_verify = true
  password = "verysecret"
}

EOF

# Apply the password reset
cat <<EOF >resources.tf

resource "citrixadc_nsip" "snip" {
    ipaddress = "${adc_instance_snip}"
    type = "SNIP"
    netmask = "255.255.255.0"
}

resource "citrixadc_service" "tf_service1" {
    servicetype = "HTTP"
    name = "tf_service1"
    ipaddress = "${backend_server1_ip}"
    ip = "${backend_server1_ip}"
    port = "80"
    depends_on = [ citrixadc_nsip.snip ]
}

resource "citrixadc_service" "tf_service2" {
    servicetype = "HTTP"
    name = "tf_service2"
    ipaddress = "${backend_server2_ip}"
    ip = "${backend_server2_ip}"
    port = "80"
    depends_on = [ citrixadc_nsip.snip ]
}

resource "citrixadc_lbvserver" "tf_lbvserver" {
    ipv46       = "${adc_instance_vip}"
    name        = "tf_lbvserver"
    port        = 80
    servicetype = "HTTP"
    lbmethod    = "ROUNDROBIN"

    depends_on = [ citrixadc_nsip.snip ]
}

resource "citrixadc_lbvserver_service_binding" "tf_binding1" {
    name = citrixadc_lbvserver.tf_lbvserver.name
    servicename = citrixadc_service.tf_service1.name
    weight = 1
}

resource "citrixadc_lbvserver_service_binding" "tf_binding2" {
    name = citrixadc_lbvserver.tf_lbvserver.name
    servicename = citrixadc_service.tf_service2.name
    weight = 1
}

EOF

exit 0
