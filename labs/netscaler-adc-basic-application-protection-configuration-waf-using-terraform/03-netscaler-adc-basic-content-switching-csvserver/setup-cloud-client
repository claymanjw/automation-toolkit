#!/bin/sh
#
# This script runs when the platform setup the challenge.
#
# The platform determines if the script was successful using the exit code of this
# script. If the exit code is not 0, the script fails. 
#

echo "This is the setup script"

set -e
mkdir -p /root/apply-waf-configuration
cd /root/apply-waf-configuration


zone="europe-west1-b"

adc_instance_nsip=`gcloud compute instances describe --zone ${zone} adc-demo --format="value(networkInterfaces[0].accessConfigs[0].natIP)"`
adc_instance_vip=`gcloud compute instances describe --zone ${zone} adc-demo --format="value(networkInterfaces[1].networkIP)"`
adc_instance_snip=`gcloud compute instances describe --zone ${zone} adc-demo --format="value(networkInterfaces[2].networkIP)"`
backend_server1_ip=`gcloud compute instances describe --zone ${zone} backend-server-1 --format="value(networkInterfaces[0].networkIP)"`
backend_server2_ip=`gcloud compute instances describe --zone ${zone} backend-server-2 --format="value(networkInterfaces[0].networkIP)"`

# Create versions.tf
cat <<EOF >versions.tf

terraform {
  required_providers {
    citrixadc = {
      source = "citrix/citrixadc"
      version = "1.31.0"
    }
  }
}

provider "citrixadc" {
  endpoint = "https://${adc_instance_nsip}"
  insecure_skip_verify = true
  password = "verysecret"
}

EOF

# Create resources for the content-switching
cat <<EOF >main.tf

resource "citrixadc_nsfeature" "tf_nsfeature" {
    cs        = true
    lb        = true
    appfw     = true
}

resource "citrixadc_nsip" "snip" {
  ipaddress = "${adc_instance_snip}"
  type      = "SNIP"
  netmask   = "255.255.255.0"
}

resource "citrixadc_lbvserver" "tf_lbvserver1" {
  name        = var.lbvserver1_name
  servicetype = var.lbvserver1_servicetype
}

resource "citrixadc_service" "web-echoserver1" {
  name        = var.service1_name
  port        = var.service1_port
  ip          = var.service1_ip
  servicetype = var.service1_servicetype
}

resource "citrixadc_lbvserver_service_binding" "lb_binding1" {
  name        = citrixadc_lbvserver.tf_lbvserver1.name
  servicename = citrixadc_service.web-echoserver1.name
}

resource "citrixadc_lbvserver" "tf_lbvserver2" {
  name        = var.lbvserver2_name
  servicetype = var.lbvserver2_servicetype
}

resource "citrixadc_service" "web-echoserver2" {
  name        = var.service2_name
  port        = var.service2_port
  ip          = var.service2_ip
  servicetype = var.service2_servicetype
}

resource "citrixadc_lbvserver_service_binding" "lb_binding2" {
  name        = citrixadc_lbvserver.tf_lbvserver2.name
  servicename = citrixadc_service.web-echoserver2.name
}

resource "citrixadc_csaction" "tf_csaction1" {
  name            = "tf_csaction1"
  targetlbvserver = citrixadc_lbvserver.tf_lbvserver1.name
}
resource "citrixadc_cspolicy" "tf_policy_echoserver1" {
  policyname = var.cspolicy1_name
  rule       = var.cspolicy1_rule
  action     = citrixadc_csaction.tf_csaction1.name
}

resource "citrixadc_csaction" "tf_csaction2" {
  name            = "tf_csaction2"
  targetlbvserver = citrixadc_lbvserver.tf_lbvserver2.name
}
resource "citrixadc_cspolicy" "tf_policy_echoserver2" {
  policyname = var.cspolicy2_name
  rule       = var.cspolicy2_rule
  action     = citrixadc_csaction.tf_csaction2.name
}

resource "citrixadc_csvserver" "tf_csvserver" {
  ipv46       = var.csvserver_ipv46
  name        = var.csvserver_name
  port        = var.csvserver_port
  servicetype = var.csvserver_servicetype
}

resource "citrixadc_csvserver_cspolicy_binding" "tf_csvscspolbind_echoserver1" {
  name       = citrixadc_csvserver.tf_csvserver.name
  policyname = citrixadc_cspolicy.tf_policy_echoserver1.policyname
  priority   = 100
}
resource "citrixadc_csvserver_cspolicy_binding" "tf_csvscspolbind_echoserver2" {
  name       = citrixadc_csvserver.tf_csvserver.name
  policyname = citrixadc_cspolicy.tf_policy_echoserver2.policyname
  priority   = 110
}

EOF

# Create variables.tf
cat <<EOF >variables.tf
variable "lbvserver1_name" {
  type        = string
  description = "lb vserver1 name"
}
variable "lbvserver1_servicetype" {
  description = "lb vserver1 Servicetype"
}

variable "lbvserver2_name" {
  type        = string
  description = "lb vserver2 name"
}
variable "lbvserver2_servicetype" {
  description = "lb vserver2 Servicetype"
}

variable "service1_name" {
  type        = string
  description = "Service1 name"
}
variable "service1_ip" {
  type        = string
  description = "Service1 ip"
}
variable "service1_servicetype" {
  description = "Service1 Servicetype"
}
variable "service1_port" {
  type        = number
  description = "Service1 Port"
}

variable "service2_name" {
  type        = string
  description = "Service2 name"
}
variable "service2_ip" {
  type        = string
  description = "Service2 ip"
}
variable "service2_servicetype" {
  description = "Service2 Servicetype"
}
variable "service2_port" {
  type        = number
  description = "Service2 Port"
}

variable "cspolicy1_name" {
  type        = string
  description = "CS policy1 name"
}
variable "cspolicy1_rule" {
  description = "CS Policy1 Rule"
}

variable "cspolicy2_name" {
  type        = string
  description = "CS policy2 name"
}
variable "cspolicy2_rule" {
  description = "CS Policy2 Rule"
}

variable "csvserver_name" {
  type        = string
  description = "CS vserver name"
}
variable "csvserver_ipv46" {
  type        = string
  description = "CS vserver ip"
}
variable "csvserver_servicetype" {
  description = "CS vserver Servicetype"
}
variable "csvserver_port" {
  type        = number
  description = "CS vserver Port"
}

EOF

# Create example.tfvars
cat <<EOF >example.tfvars

# Lb_Vserver1
lbvserver1_name        = "tf_lbvserver1"
lbvserver1_servicetype = "HTTP"

# Lb_Vserver2
lbvserver2_name        = "tf_lbvserver2"
lbvserver2_servicetype = "HTTP"

# Service 1
service1_name        = "web-echoserver1"
service1_ip          = "${backend_server1_ip}"
service1_port        = 80
service1_servicetype = "HTTP"

# Service 2
service2_name        = "web-echoserver2"
service2_ip          = "${backend_server2_ip}"
service2_port        = 80
service2_servicetype = "HTTP"

# CS Policy 1
cspolicy1_name = "tf_policy_echoserver1"
cspolicy1_rule  = "HTTP.REQ.URL.SET_TEXT_MODE(IGNORECASE).STARTSWITH(\"/echoserver1\")"

# CS Policy 2
cspolicy2_name = "tf_policy_echoserver2"
cspolicy2_rule  = "HTTP.REQ.URL.SET_TEXT_MODE(IGNORECASE).STARTSWITH(\"/echoserver2\")"

# CS Vserver
csvserver_name        = "tf_csvserver"
csvserver_ipv46       = "${adc_instance_vip}"
csvserver_port        = 80
csvserver_servicetype = "HTTP"


EOF

exit 0
